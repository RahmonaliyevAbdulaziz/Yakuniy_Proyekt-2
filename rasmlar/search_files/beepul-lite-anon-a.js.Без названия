;(() => {
    const lang = document.querySelector('html').lang;
    const COMPONENT_NAME = 'beepul-lite-anon';
    const BASE_URL = 'https://beeline.uz';
    const CARD_LOGOS = [
        '/wp-content/themes/new-theme/assets/img/logos/humo-logo.png',
        '/wp-content/themes/new-theme/assets/img/logos/uzcard-logo.png',
    ];

    const SBP_LOGO = 'https://beeline.uz/assets/img/logos/sbp-logo.svg';
    const SBP_LOGO_WHITE = 'https://beeline.uz/assets/img/logos/sbp-logo-white.svg';

    const UZB_CARD_SYSTEMS = [
        { src: 'https://beeline.uz/assets/img/logos/uzcard.png' },
        { src: 'https://beeline.uz/assets/img/logos/humo.png' }
    ]

    const FOREIGN_CARD_SYSTEMS = [
        // { src: 'https://beeline.uz/assets/img/logos/visa.png', height: '19px' },
        // { src: 'https://beeline.uz/assets/img/logos/mc.png' },
        // { src: 'https://beeline.uz/assets/img/logos/qr_oplata.png', height: '26px' },
        { src: 'https://beeline.uz/assets/img/sbp-logo.png', height: '37px' },
    ]

    let isOpen = false;
    let initialized = false;

    const i18n = {
        ru: {
            balance_topup: 'Пополнение баланса',
            number_and_sum: 'Номер телефона и сумма',
            card_info: 'Данные карты',
            confirmation: 'Подтверж&shy;дение',
            confirm: 'Подтвердить',
            mob_num: 'Номер телефона:',
            sum: 'Сумма:',
            reset: 'сбросить',
            card_num: 'Номер карты:',
            card_exp: 'Срок действия:',
            enter_sms_code: 'Введите код из SMS:',
            back: 'назад',
            next: 'далее',
            something_went_wrong: 'Что-то пошло не так',
            try_again: 'Попробуйте начать все сначала.',
            try_again_2: 'Попробовать все сначала',
            wrong_num: 'Укажите правильный номер Beeline',
            sum_err(minVal, maxVal) {
                return `Сумма должна быть от ${minVal} до ${maxVal}`;
            },
            card_err: 'Номер карты указан неверно',
            card_exp_err: 'Указан неверный срок действия карты',
            sms_exp_err: 'Срок действия SMS-кода истёк',
            send_code_again: 'Выслать код еще раз?',
            som: 'сум',
            sms_exp_timer: 'Срок действия SMS-кода: ',
            enter_6_code: 'Введите 6-ти значный код',
            wrong_sms_code: 'Вы ввели неверный SMS-код',
            close: 'Закрыть',
            beeline_only: 'Только номера Beeline',
            pay_method: 'Способ оплаты',
            choose_pay_method_err: 'Выберите способ оплаты',
            sbp_method_desc: 'Пополнение баланса производится через систему <a href="https://sbp.nspk.ru/" target="_blank" rel="noreferrer noopener">СБП</a>.',
            beepul_method_desc: `Пополнение баланса производится через систему <a href="https://beepul.beeline.uz/" target="_blank" rel="noreferrer noopener">Beepul</a>.`,
            waiting_for_sbp: 'Ожидаю оплаты из СБП',
            pay: 'Оплатить',
            deposited(value) {
                return `Оплачено ${value} ${i18n[lang].som}`
            },
            deposited_for_num(value) {
                return `на номер +998${value}`
            }
        },
        uz: {
            deposited(value) {
                return `${value} ${i18n[lang].som} miqdorda to‘lov amalga oshirildi`
            },
            deposited_for_num(value) {
                return `+998${value} raqamiga`
            },
            balance_topup: 'Hisobni to‘ldirish',
            number_and_sum: 'Raqam va to‘lov miqdori',
            card_info: 'Karta ma’lumotlari',
            confirmation: 'Tasdiqlash',
            confirm: 'Tasdiqlash',
            mob_num: 'Telefon raqami',
            sum: 'To‘lov miqdori:',
            reset: 'Yangilash',
            card_num: 'Karta raqami:',
            card_exp: 'Amal qilish muddati:',
            enter_sms_code: 'SMS da kelgan kodni kiriting',
            back: 'Orqaga',
            next: 'Davom etish',
            something_went_wrong: 'Xatolik yuz berdi',
            try_again: 'Qaytadan urinib ko‘ring.',
            try_again_2: 'Qayta urinish',
            wrong_num: 'Beeline raqamini to‘g‘ri kiriting',
            sum_err(minVal, maxVal) {
                return `To‘lov ${minVal} dan ${maxVal} gacha bo‘lishi lozim`;
            },
            card_err: 'Karta raqami noto‘g‘ri kiritilgan',
            card_exp_err: 'Kartaning amal qilish muddati noto‘g‘ri kiritilgan',
            sms_exp_err: 'SMS-kodning amal qilish muddati o‘tdi',
            send_code_again: 'Kodni qayta yuborish',
            som: 'so‘m',
            sms_exp_timer: 'SMS kodining amal qilish muddati: ',
            enter_6_code: '6 xonali kodni kiriting',
            wrong_sms_code: 'Siz noto‘g‘ri SMS-kodni kiritdingiz',
            close: 'Yopish',
            beeline_only: 'Faqat Beeline raqamlari',
            pay_method: 'To‘lov usullari',
            pay: 'To‘lov',
            choose_pay_method_err: 'To‘lov usulini tanlang',
            sbp_method_desc: 'Hisobni to‘ldirish <a href="https://sbp.nspk.ru/" target="_blank" rel="noreferrer noopener">Tezkor</a> to‘lovlar tizimi orqali amalga oshiriladi.',
            beepul_method_desc: `Hisobni to‘ldirish <a href="https://beepul.beeline.uz/" target="_blank" rel="noreferrer noopener">Beepul</a> tizimi orqali amalga oshiriladi.`,
            waiting_for_sbp: 'SBPdan to‘lov kutilmoqda'
        }
    }

    const ICONS = {
        RESET: `<svg width="14" height="13" viewBox="0 0 14 13" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M2.42419 6.5C2.42419 9.53757 4.88663 12 7.92419 12C10.9618 12 13.4242 9.53757 13.4242 6.5C13.4242 3.46243 10.9618 1 7.92419 1" stroke="currentColor"/><path d="M0.633551 8.92028L2.1068 6.17993L4.84715 7.65318" stroke="currentColor"/></svg>`,
        ARROW_LEFT: `<svg width="16" height="8" viewBox="0 0 16 8" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M15.5 4H1" stroke="currentColor"/>
            <path d="M4 1L1 4C1 4 3.02369 6.02369 4 7" stroke="currentColor"/>
        </svg>`,
        SUCCESS: `<svg width="66" height="66" viewBox="0 0 66 66" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <circle cx="35" cy="35" r="31" fill="#8FC740"/>
                    <path d="M18 30L32.5 44.5L63 14" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M17 28L31.5 42.5L62 12" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M55.7218 14C50.3117 6.14744 41.257 1 31 1C14.4315 1 1 14.4315 1 31C1 47.5685 14.4315 61 31 61C47.5685 61 61 47.5685 61 31C61 27.1168 60.2622 23.406 58.9192 20" stroke="black" stroke-width="2" stroke-linecap="round"/>
                </svg>`,
        ERROR: `<svg width="66" height="65" viewBox="0 0 66 65" fill="none" xmlns="http://www.w3.org/2000/svg">
        <circle cx="35" cy="34" r="31" fill="#F359A1"/>
        <circle cx="31" cy="31" r="30" stroke="black" stroke-width="2"/>
        <circle cx="21" cy="24" r="3" fill="white"/>
        <circle cx="44" cy="24" r="3" fill="white"/>
        <path d="M47.4634 46C43.9793 41.728 38.6741 39 32.7317 39C26.7893 39 21.484 41.728 18 46" stroke="white" stroke-width="2" stroke-linecap="round"/>
        <circle cx="20" cy="23" r="3" fill="black"/>
        <circle cx="43" cy="23" r="3" fill="black"/>
        <path d="M46.4634 45C42.9793 40.728 37.6741 38 31.7317 38C25.7893 38 20.484 40.728 17 45" stroke="black" stroke-width="2" stroke-linecap="round"/>
        </svg>
        `
    }

    const INPUT_TYPE = {
        BUTTON: 'button',
        LINK_BUTTON: 'link-btn',
        INPUT: 'input',
    }

    const MASK_HANDLERS = {
        CARD_EXPIRY: (e) => {
            /* Example: 12/24 */
            const input = e.target;
            const value = input.value.replace(/\D+/g, '');
            const numberLength = 4;
            
            let result = '';
            
            for (let i = 0; i < value.length && i < numberLength; i++) {
                if (i === 2) {
                    result += '/';
                }
                result += value[i];
            }

            input.value = result;
        },
        MOBILE_PHONE: (e) =>{
            // Example: 90 999-99-99
            const input = e.target;
            const value = input.value.replace(/\D+/g, '');
            const numberLength = 9;
            let result = '';
            
            for (let i = 0; i < value.length && i < numberLength; i++) {
                if (i === 2) {
                    result += ' ';
                } else if (i === 5) {
                    result += '-'
                } else if (i === 7) {
                    result += '-'
                }
                result += value[i];
            }

            input.value = result;
        },
        SUM: (e) => {
            const input = e.target;
            const value = input.value.replace(/\D+/g, '');
            const numberLength = 7;

            let result = '';

            for (let i = 0; i < value.length && i < numberLength; i++) {
                result += value[i];
            }

            input.value = result;
        },
        SMS_CODE: (e) => {
            const input = e.target;
            const value = input.value.replace(/\D+/g, '');
            const numberLength = 6;

            let result = '';

            for (let i = 0; i < value.length && i < numberLength; i++) {
                result += value[i];
            }

            input.value = result;
        }
    }

    const formState = {
        currentStep: null,
        mobNumber: '',
        sum: '',
        cardNumber: '',
        cardExpiry: '',
        smsCodeCountdowns: [],
        paySystem: '',
        operationId: null,
    };

    let externalCallbacks = {
        onSuccess: null
    }
    
    const abortControllers = {
        list: [],
        abortAll() {
            abortControllers.list.forEach(controller => {
                controller.abort();
            })
        },
        clear() {
            abortControllers.list.splice(0, abortControllers.list.length);
        }
    };

    const clearAllCountdowns = () => {
        formState.smsCodeCountdowns.forEach(intervalId => {
            clearInterval(intervalId);
        });
        formState.smsCodeCountdowns = [];
    }

    const resetAll = () => {
        formState.currentStep = formSteps.length > 0 ? formSteps[0] : null,
        formState.mobNumber = '',
        formState.sum = '',
        formState.cardNumber = '',
        formState.cardExpiry = '',
        formState.paySystem = '';
        formState.smsCodeCountdowns = [],
        formState.operationId = null;

        externalCallbacks.onSuccess = null;

        initialized = false;

        clearAllCountdowns();
    }

    const modalLoading = {
        show: (modal) => {
            if (modal) {
                const $loader = modal.querySelector(`.beeline-modal__loading`);
    
                if ($loader) {
                    $loader.style.display = 'block';
                }
            }
        },
        hide: (modal) => {
            if (modal) {
                const $loader = modal.querySelector(`.beeline-modal__loading`);
    
                if ($loader) {
                    $loader.style.display = 'none';
                }
            }
        }
    }

    function load_lib(id, url) {
        const IMASK_ID = id;

        return new Promise((resolve, reject) => {
            let script = document.createElement('script');
            script.id = IMASK_ID;
            script.src = url;
            script.addEventListener('load', () => {
                script.setAttribute('loaded', '1');
                resolve();
            });
            document.body.append(script);
        });
    }

    async function load_imask(callback, modalLoading) {
        const IMASK_ID = 'imask-js';
        const IMASK_URL = 'https://unpkg.com/imask';

        modalLoading.show();

        const IMASK_SCRIPT_ELEMENT = document.getElementById(IMASK_ID);

        if (IMASK_SCRIPT_ELEMENT) {
            if (IMASK_SCRIPT_ELEMENT.getAttribute('loaded') === '1') {
                callback();
                modalLoading.hide();
            }
        } else {
            try {
                await load_lib(IMASK_ID, IMASK_URL);
            }
            catch(e) {}
            finally {
                callback();
                modalLoading.hide();
            }
        }

        // if (IMASK_SCRIPT_ELEMENT) {
        //     if (IMASK_SCRIPT_ELEMENT.getAttribute('loaded') === '1') {
        //         callback();
        //     }
        // } else {
        //     modalLoading.show();
        //     let script = document.createElement('script');
        //     script.id = IMASK_ID;
        //     script.src = 'https://unpkg.com/imask';
        //     script.addEventListener('load', () => {
        //         callback();
        //         modalLoading.hide();
        //         script.setAttribute('loaded', '1');
        //     })
        //     document.body.append(script);
        // }
    }

    function API_INIT(onSuccess) {
        const dataToSend = {
            "pan": formState.cardNumber,
            "expiryDate": formState.cardExpiry,
            "amount": formState.sum,
            "msisdn": `998${formState.mobNumber}`,
            "lang": lang,
            "performer_phone_number": `998${formState.mobNumber}`
        };

        modalLoading.show($modal);
        
        const abortController = new AbortController();
        const signal = abortController.signal;

        abortControllers.list.push(abortController);

        axios.post(`${BASE_URL}/api/refill/init`, dataToSend, { signal })
            .then((res) => {
                onSuccess(res);
                modalLoading.hide($modal);
            })
            .catch((e) => {
                console.error('API_INIT error', e);
                if (e.name !== 'CanceledError' && e.name !== 'AbortError') {
                    modalLoading.hide($modal);
                    renderAlert(i18n[lang].something_went_wrong, i18n[lang].try_again, ICONS.ERROR, {
                        text: i18n[lang].try_again_2,
                        handler: () => {
                            resetAll()
                            renderContent();
                        },
                    })
                }
            })
    }

    function API_EXEC(smsCode, onSuccess) {
        const dataToSend = {
            "operationId": formState.operationId,
            "code": smsCode,
            "lang": lang
        }

        modalLoading.show($modal);

        const abortController = new AbortController();
        const signal = abortController.signal;

        abortControllers.list.push(abortController);

        axios.post(`${BASE_URL}/api/refill/exec`, dataToSend, { signal })
        .then((res) => {
            modalLoading.hide($modal);
            onSuccess(res);
        })
        .catch((e) => {
            console.error('API_EXEC error', e);
            if (e.name !== 'CanceledError' && e.name !== 'AbortError') {
                modalLoading.hide($modal);
                renderAlert(i18n[lang].something_went_wrong, i18n[lang].try_again, ICONS.ERROR, {
                    text: i18n[lang].try_again_2,
                    handler: () => {
                        resetAll()
                        renderContent();
                    },
                })
            }
        });
    }
    
    function validate_phone_and_sum() {
        const $inputs = document.querySelectorAll(`.${COMPONENT_NAME}-modal .rf-forms__input`);
        // $inputs[0].value = formState.mobNumber;
        // $inputs[1].value = formState.sum;

        const validateMobileNum = (value) => {
            const result = value.replace(/\D+/g, '');
            if (result.length < 9) {
                return false;
            } else {
                const mobileNumCode = result.substring(0, 2);
                if (!['90', '91'].includes(mobileNumCode)) {
                    return false;
                }
            }
            return result;
        }

        const SBP_MIN = 7000;
        const BEEPUL_MIN = 1000;

        let MIN_UZS = BEEPUL_MIN;

        if (formState.paySystem === 'foreign-system') {
            MIN_UZS = SBP_MIN
        } else if (formState.paySystem === 'uzb-system') {
            MIN_UZS = BEEPUL_MIN
        }

        const validateSum = (value) => {
            let result = value.replace(/\D+/g, '');

            if (result.length < 1) {
                return false;
            }

            result = Number.parseInt(result) || 0;

            if (result < MIN_UZS || result > 1000000) {
                return false;
            }
            return result;
        }

        if (validateMobileNum($inputs[0].value) === false) {
            const $errors = document.querySelector(`.${COMPONENT_NAME}-modal .${COMPONENT_NAME}-modal__errors`);
            $errors.innerText = i18n[lang].wrong_num;
            return;
        }

        if (validateSum($inputs[1].value) === false) {
            const $errors = document.querySelector(`.${COMPONENT_NAME}-modal .${COMPONENT_NAME}-modal__errors`);
            $errors.innerText = i18n[lang].sum_err(MIN_UZS, '1 000 000');
            return;
        }

        formState.mobNumber = validateMobileNum($inputs[0].value);
        formState.sum = validateSum($inputs[1].value);

        if (formState.paySystem === 'foreign-system') {

            const url = `https://unitelsbp.mobi-money.ru/pay/article/unitel_sbp?sum=${formState.sum}&account=998${formState.mobNumber}&successURL=https://beeline.uz/&failURL=https://beeline.uz/`
        
            console.log(formState.paySystem, formState.mobNumber, formState.sum);
            console.log(url);

            window.__BeepulLiteForm.closeModal();

            const $sbpAlert = document.createElement('div');
            $sbpAlert.innerHTML = `
                <div style="font-family: 'PT Sans'; font-weight: bold;" class="mb-2">${i18n[lang].waiting_for_sbp}</div>
                    <div style="position: relative;height: 30px;display: flex;align-items: center;justify-content: center;">
                        <img src="${SBP_LOGO}" style="height: 100%;">
                    </div>
                </div>
            `;

            swal({
                content: $sbpAlert,
                buttons: 'Закрыть'
            });

            window.open(url, '_blank');
        } else if (formState.paySystem === 'uzb-system') {
            changeStep(2);
        }
    }

    const formSteps = [
        {
            id: 'step1',
            title: i18n[lang].balance_topup,
            stepName: i18n[lang].number_and_sum,
            fields: [
                {
                    type: INPUT_TYPE.INPUT,
                    typeAttr: 'tel',
                    prefix: '+998',
                    label: i18n[lang].mob_num,
                    placeholder: '__ ___-__-__',
                    inputmode: 'numeric',
                    description: i18n[lang].beeline_only
                },
                {
                    type: INPUT_TYPE.INPUT,
                    typeAttr: 'text',
                    suffix: i18n[lang].som,
                    label: i18n[lang].sum,
                    placeholder: '1000 — 1000000',
                    inputmode: 'numeric',
                }
            ],
            onMount: async () => {
                const $inputs = document.querySelectorAll(`.${COMPONENT_NAME}-modal .rf-forms__input`);
                $inputs[0].value = formState.mobNumber;
                $inputs[1].value = formState.sum;

                const initNumMask = () => {
                    if (IMask) {
                        if ($inputs[0]) {
                            IMask($inputs[0], {
                                mask: '00 000-00-00',
                                lazy: false,
                            });
                        }

                        if ($inputs[1]) {
                            IMask($inputs[1], {
                                mask: Number,
                                autofix: false,
                                max: 1000000,
                            });
                        }
                    }
                }

                await load_imask(initNumMask, modalLoading);

                if (isOpen) {
                    // dataLayer.push({
                    //     event: "custom_event",
                    //     category: "pay",
                    //     action: "phone",
                    //     ...getCookie('accessPhone') ? { user_id: getCookie('accessPhone') } : {}
                    // });
                }

                // Раскомментить когда включим кеширование для файлов 
                // try { 
                //     CARD_LOGOS.forEach(imgSrc => {
                //         let image = new Image();
                //         image.src = imgSrc;
                //     })
                // } catch (e) {}
            },
            controls: [
                {
                    type: 'custom-btn',
                    customHTML: `
                        <button class="rf-forms__large-btn rf-forms__large-btn--purple">
                            <span>${i18n[lang].pay}</span>
                            <img src="${SBP_LOGO_WHITE}" class="rf-forms__large-btn-icon" draggable="false">
                        </button>
                    `,
                    handler: () => {
                        formState.paySystem = 'foreign-system';
                        validate_phone_and_sum();
                    }
                },
                {
                    type: 'custom-btn',
                    customHTML: `
                        <button class="rf-forms__large-btn">
                            <span>${i18n[lang].pay}</span>
                            <img src="${UZB_CARD_SYSTEMS[0].src}" class="rf-forms__large-btn-icon" draggable="false">
                            <img src="${UZB_CARD_SYSTEMS[1].src}" class="rf-forms__large-btn-icon" draggable="false">
                        </button>
                    `,
                    handler: () => {
                        formState.paySystem = 'uzb-system';
                        validate_phone_and_sum();
                    },
                },
                // {
                //     type: INPUT_TYPE.LINK_BUTTON,
                //     text: i18n[lang].reset,
                //     icon: ICONS.RESET,
                //     handler: () => {
                //         resetAll();
                //         renderContent();
                //     },
                // },
                // {
                //     type: INPUT_TYPE.BUTTON,
                //     text: i18n[lang].next,
                //     handler: () => {
                //         const $inputs = document.querySelectorAll(`.${COMPONENT_NAME}-modal .rf-forms__input`);
                //         // $inputs[0].value = formState.mobNumber;
                //         // $inputs[1].value = formState.sum;

                //         const validateMobileNum = (value) => {
                //             const result = value.replace(/\D+/g, '');
                //             if (result.length < 9) {
                //                 return false;
                //             } else {
                //                 const mobileNumCode = result.substring(0, 2);
                //                 if (!['90', '91'].includes(mobileNumCode)) {
                //                     return false;
                //                 }
                //             }
                //             return result;
                //         }

                //         const SBP_MIN = 7000;
                //         const BEEPUL_MIN = 1000;

                //         let MIN_UZS = BEEPUL_MIN;

                //         if (formState.paySystem === 'foreign-system') {
                //             MIN_UZS = SBP_MIN
                //         } else if (formState.paySystem === 'uzb-system') {
                //             MIN_UZS = BEEPUL_MIN
                //         }

                //         const validateSum = (value) => {
                //             let result = value.replace(/\D+/g, '');

                //             if (result.length < 1) {
                //                 return false;
                //             }
    
                //             result = Number.parseInt(result) || 0;

                //             if (result < MIN_UZS || result > 1000000) {
                //                 return false;
                //             }
                //             return result;
                //         }

                //         if (validateMobileNum($inputs[0].value) === false) {
                //             const $errors = document.querySelector(`.${COMPONENT_NAME}-modal .${COMPONENT_NAME}-modal__errors`);
                //             $errors.innerText = i18n[lang].wrong_num;
                //             return;
                //         }

                //         if (validateSum($inputs[1].value) === false) {
                //             const $errors = document.querySelector(`.${COMPONENT_NAME}-modal .${COMPONENT_NAME}-modal__errors`);
                //             $errors.innerText = i18n[lang].sum_err(MIN_UZS, '1 000 000');
                //             return;
                //         }

                //         formState.mobNumber = validateMobileNum($inputs[0].value);
                //         formState.sum = validateSum($inputs[1].value);

                //         if (formState.paySystem === 'foreign-system') {

                //             const url = `https://unitelsbp.mobi-money.ru/pay/article/unitel_sbp?sum=${formState.sum}&account=998${formState.mobNumber}&successURL=https://beeline.uz/&failURL=https://beeline.uz/`
                        
                //             console.log(formState.paySystem, formState.mobNumber, formState.sum);
                //             console.log(url);

                //             window.__BeepulLiteForm.closeModal();

                //             const $sbpAlert = document.createElement('div');
                //             $sbpAlert.innerHTML = `
                //                 <div style="font-family: 'PT Sans'; font-weight: bold;" class="mb-2">${i18n[lang].waiting_for_sbp}</div>
                //                     <div style="position: relative;height: 30px;display: flex;align-items: center;justify-content: center;">
                //                         <img src="${SBP_LOGO}" style="height: 100%;">
                //                     </div>
                //                 </div>
                //             `;

                //             swal({
                //                 content: $sbpAlert,
                //                 buttons: 'Закрыть'
                //             });

                //             window.open(url, '_blank');
                //         } else if (formState.paySystem === 'uzb-system') {
                //             changeStep(3);
                //         }
                //         // let mobileNum = $inputs[0].value.replace(/\D+/g, '');
                //         // let sum = $inputs[1].value.replace(/\D+/g, '');
                //         // sum = Number.parseInt(sum);
                //         // changeStep(3);
                //     },
                // }
            ]
        },
        // {
        //     id: 'step2',
        //     title: i18n[lang].pay_method,
        //     stepName: i18n[lang].pay_method,
        //     fields: [],
        //     onMount: async () => {
        //         const $mainContent = document.querySelector(`.${COMPONENT_NAME}-main-content`);

        //         if (!$mainContent) {
        //             return;
        //         }


        //         $mainContent.innerHTML = `
        //             <div class="${COMPONENT_NAME}-checkbox-list">
        //                 <label>
        //                     <input type="radio" name="pay-system" value="uzb-system" class="${COMPONENT_NAME}-paysystem-radio">
        //                     <span class="checkmark"></span>
        //                     <div>
        //                         <div class="beepul-lite-anon-checkbox-list__logos-list">
        //                             ${UZB_CARD_SYSTEMS.reduce((html, logoSrc) => {
        //                                 const style = logoSrc.height ? `height: ${logoSrc.height};` : '';

        //                                 return html + `<img src="${logoSrc.src}" style="${style}">`;
        //                             }, '')}
        //                         </div>
        //                         <span>${i18n[lang].beepul_method_desc}</span>
        //                     </div>
        //                 </label>
        //                 <label>
        //                     <input type="radio" name="pay-system" value="foreign-system" class="${COMPONENT_NAME}-paysystem-radio">
        //                     <span class="checkmark"></span>
        //                     <div>
        //                         <div class="beepul-lite-anon-checkbox-list__logos-list">
        //                             ${FOREIGN_CARD_SYSTEMS.reduce((html, logoSrc) => {
        //                                 const style = logoSrc.height ? `height: ${logoSrc.height};` : '';
        //                                 return html + `<img src="${logoSrc.src}" style="${style}">`;
        //                             }, '')}
        //                         </div>
        //                         <span>${i18n[lang].sbp_method_desc}</span>
        //                     </div>
        //                 </label>
        //             </div>
        //         `;

        //         const $radios = $mainContent.querySelectorAll(`.${COMPONENT_NAME}-paysystem-radio`);

        //         $radios.forEach($inputRadio => {
        //             if (formState.paySystem) {
        //                 if (formState.paySystem === $inputRadio.value) {
        //                     $inputRadio.checked = true;
        //                 }
        //             }

        //             $inputRadio.addEventListener('input', (e) => {
        //                 formState.paySystem = e.target.value;

        //                 const $errors = document.querySelector(`.${COMPONENT_NAME}-modal .${COMPONENT_NAME}-modal__errors`);
        //                 $errors.innerText = '';
        //             });
        //         });

        //         if (isOpen) {
        //             // dataLayer.push({
        //             //     event: "custom_event",
        //             //     category: "pay",
        //             //     action: "phone",
        //             //     ...getCookie('accessPhone') ? { user_id: getCookie('accessPhone') } : {}
        //             // });
        //         }

        //         // Раскомментить когда включим кеширование для файлов 
        //         // try { 
        //         //     CARD_LOGOS.forEach(imgSrc => {
        //         //         let image = new Image();
        //         //         image.src = imgSrc;
        //         //     })
        //         // } catch (e) {}
        //     },
        //     controls: [
        //         {
        //             type: INPUT_TYPE.LINK_BUTTON,
        //             text: i18n[lang].back,
        //             icon: ICONS.ARROW_LEFT,
        //             handler: () => {
        //                 changeStep(1);
        //             },
        //         },
        //         {
        //             type: INPUT_TYPE.BUTTON,
        //             text: i18n[lang].next,
        //             handler: () => {
        //                 if (!formState.paySystem) {
        //                     const $errors = document.querySelector(`.${COMPONENT_NAME}-modal .${COMPONENT_NAME}-modal__errors`);

        //                     // need i18n
        //                     $errors.innerText = i18n[lang].choose_pay_method_err;
        //                 } else {
        //                     changeStep(2);
        //                 }
        //             },
        //         }
        //     ]
        // },
        {
            id: 'step2',
            title: i18n[lang].card_info,
            stepName: i18n[lang].card_info,
            fields: [
                {
                    type: INPUT_TYPE.INPUT,
                    typeAttr: 'text',
                    label: i18n[lang].card_num,
                    placeholder: '0000 0000 0000 0000',
                    inputmode: 'numeric',
                },
                {
                    type: INPUT_TYPE.INPUT,
                    typeAttr: 'text',
                    label: i18n[lang].card_exp,
                    placeholder: '__/__',
                    inputmode: 'numeric',
                    cardLogos: CARD_LOGOS,
                }
            ],
            onMount: async () => {
                const $inputs = document.querySelectorAll(`.${COMPONENT_NAME}-modal .rf-forms__input`);
                $inputs[0].value = formState.cardNumber;
                $inputs[1].value = formState.cardExpiry;


                const initCardMasks = () => {
                    if (IMask) {
                        if ($inputs[0]) {
                            IMask($inputs[0], {
                                mask: '0000 0000 0000 0000',
                            });

                            $inputs[0].focus();
                        }

                        if ($inputs[1]) {
                            IMask($inputs[1], {
                                mask: 'MM/YY',
                                lazy: false,
                                blocks: {
                                    MM: {
                                        mask: IMask.MaskedRange,
                                        from: 1,
                                        to: 12,
                                        minLength: 2,
                                    },
                                    YY: {
                                        mask: '00',
                                    }
                                }
                            });
                        }
                    }
                }

                await load_imask(initCardMasks, modalLoading);

                // dataLayer.push({
                //     event: "custom_event",
                //     category: "pay",
                //     action: "card",
                //     ...getCookie('accessPhone') ? { user_id: getCookie('accessPhone') } : {}
                // });
            },
            controls: [
                {
                    type: INPUT_TYPE.LINK_BUTTON,
                    text: i18n[lang].back,
                    icon: ICONS.ARROW_LEFT,
                    handler: () => {
                        const $inputs = document.querySelectorAll(`.${COMPONENT_NAME}-modal .rf-forms__input`);
                        formState.cardNumber = $inputs[0].value;
                        formState.cardExpiry = $inputs[1].value;
                        changeStep(1);
                    },
                },
                {
                    type: INPUT_TYPE.BUTTON,
                    text: i18n[lang].next,
                    handler: () => {
                        const $inputs = document.querySelectorAll(`.${COMPONENT_NAME}-modal .rf-forms__input`);

                        const validateCardNumber = (value) => {
                            let result = value.replace(/\D+/g, '');
                            if (result.length < 16) {
                                return false;
                            }
                            return result;
                        }

                        const validateExpiry = (value) => {
                            let result = value.replace(/\D+/g, '');
    
                            if (result.length < 4) {
                                return false;
                            }
    
                            const month = Number.parseInt(result.substring(0, 2));
                            const year = Number.parseInt(result.substring(2, 5));
    
                            if ((!(month >= 1) || !(month <= 12))) {
                                return false;
                            }
    
                            if (year < Number.parseInt((new Date).getFullYear().toString().substring(2, 5))) {
                                return false;
                            }
    
                            return result;
                        }

                        const $errors = document.querySelector(`.${COMPONENT_NAME}-modal .${COMPONENT_NAME}-modal__errors`);
                        $errors.innerText = '';

                        if (validateCardNumber($inputs[0].value) === false) {
                            $errors.innerText = i18n[lang].card_err;
                            return;
                        }

                        if (validateExpiry($inputs[1].value) === false) {
                            $errors.innerText = i18n[lang].card_exp_err;
                            return;
                        }

                        formState.cardNumber = validateCardNumber($inputs[0].value);
                        formState.cardExpiry = $inputs[1].value;

                        API_INIT((res) => {
                            if (res.data.status === 0) {
                                formState.operationId = res.data.operationId;
                                $errors.innerText = '';
                                changeStep(3);
                            } else {
                                $errors.innerText = i18n[lang].card_err;
                            }
                        });
                    },
                }
            ]
        },
        {
            id: 'step3',
            title: i18n[lang].confirmation,
            stepName: i18n[lang].confirmation,
            fields: [
                {
                    type: INPUT_TYPE.INPUT,
                    typeAttr: 'text',
                    label: i18n[lang].enter_sms_code,
                    inputmode: 'numeric',
                    inputMask: MASK_HANDLERS.SMS_CODE
                },
            ],
            onMount: () => {
                const $content = document.querySelector(`.${COMPONENT_NAME}-controls`);
                const $countDown = document.createElement('div');
                $countDown.className = `${COMPONENT_NAME}__countdown`;
                $content.insertAdjacentElement('beforebegin', $countDown);

                const $resetCountdown = document.createElement('button');
                $resetCountdown.className = `rf-forms__link-btn`;
                $resetCountdown.innerText = i18n[lang].send_code_again;
                $resetCountdown.style.display = 'none';
                $resetCountdown.style.fontSize = '12px';

                const startTimer = () => {
                    clearAllCountdowns();
                    let duration = 60 * 3;
                    // let duration = 10;
                    let timer = duration, minutes, seconds;
                    let started = false;

                    const countdown = () => {
                        minutes = parseInt(timer / 60, 10);
                        seconds = parseInt(timer % 60, 10);
                
                        minutes = minutes < 10 ? "0" + minutes : minutes;
                        seconds = seconds < 10 ? "0" + seconds : seconds;
                
                        $countDown.innerText = i18n[lang].sms_exp_timer + minutes + ":" + seconds;

                        if (!started) {
                            timer--;
                            started = true;
                        }
                    }

                    countdown();

                    const interval = setInterval(function () {
                        countdown();

                        if (--timer < 0) {
                            console.info('Payment done');
                            const $errors = document.querySelector(`.${COMPONENT_NAME}-modal .${COMPONENT_NAME}-modal__errors`);
                            $errors.innerText = '';
                            clearInterval(interval);
                            clearAllCountdowns();
                            $countDown.innerText = i18n[lang].sms_exp_err;
                            $countDown.className += ` ${COMPONENT_NAME}__countdown--expired`;
                            $resetCountdown.style.display = 'flex';
                        }
                    }, 1000);

                    formState.smsCodeCountdowns.push(interval);
                };


                $resetCountdown.addEventListener('click', () => {
                    // clear errors
                    const $errors = document.querySelector(`.${COMPONENT_NAME}-modal .${COMPONENT_NAME}-modal__errors`);
                    $errors.innerText = '';

                    $countDown.className = ` ${COMPONENT_NAME}__countdown`;
                    $resetCountdown.style.display = 'none';
                    
                    const $inputs = document.querySelectorAll(`.${COMPONENT_NAME}-modal .rf-forms__input`);
                    if ($inputs) {
                        if ($inputs[0]) {
                            $inputs[0].value = '';
                        }
                    }

                    API_INIT((res) => {
                        if (res.data.status === 0) {
                            formState.operationId = res.data.operationId
                            startTimer();
                        }
                    });
                    
                });
                $content.insertAdjacentElement('beforebegin', $resetCountdown);

                startTimer();
            },
            controls: [
                {
                    type: INPUT_TYPE.LINK_BUTTON,
                    text: i18n[lang].back,
                    icon: ICONS.ARROW_LEFT,
                    handler: () => {
                        clearAllCountdowns();
                        changeStep(3);
                    },
                },
                {
                    type: INPUT_TYPE.BUTTON,
                    text: i18n[lang].confirm,
                    handler: () => {
                        const $inputs = document.querySelectorAll(`.${COMPONENT_NAME}-modal .rf-forms__input`);
                        const smsCodeValue = $inputs[0].value.replace(/\D+/g, '');

                        const $errors = document.querySelector(`.${COMPONENT_NAME}-modal .${COMPONENT_NAME}-modal__errors`);

                        $errors.innerText = '';

                        if (smsCodeValue.length < 6) {
                            $errors.innerText = i18n[lang].enter_6_code;
                            return;
                        }

                        API_EXEC(smsCodeValue, (res) => {
                            let topupStatus = 'unknown';

                            if (res.data.status === 4) {
                                topupStatus = 'success'
                                renderAlert(i18n[lang].deposited(formState.sum), i18n[lang].deposited_for_num(formState.mobNumber), ICONS.SUCCESS, {
                                    text: i18n[lang].close,
                                    handler: () => {
                                        if (typeof externalCallbacks.onSuccess === 'function') {
                                            externalCallbacks.onSuccess();
                                        }

                                        window.__BeepulLiteForm.closeModal();
                                    },
                                }, true);

                                // dataLayer.push({
                                //     event: "custom_event",
                                //     category: "pay",
                                //     action: "success",
                                //     ...getCookie('accessPhone') ? { user_id: getCookie('accessPhone') } : {}
                                // });
                            }
                            else if(res.data.status === 9) { // Wrong sms code
                                topupStatus = 'wrong_sms'
                                $errors.innerText = i18n[lang].wrong_sms_code;
                            }
                            else {
                                topupStatus = 'failed'
                                renderAlert(i18n[lang].something_went_wrong, i18n[lang].try_again, ICONS.ERROR, {
                                    text: i18n[lang].try_again_2,
                                    handler: () => {
                                        resetAll();
                                        renderContent();
                                    },
                                })
                            }

                            // gtag('event', 'beepul_anon_topup', {
                            //     'status': topupStatus,
                            //     'page_url': window.location.href,
                            // })
                        })
                    },
                }
            ]
        }
    ];
    

    formState.currentStep = formSteps.length > 0 ? formSteps[0] : null;

    function changeStep(stepNum) {
        formState.currentStep = formSteps[stepNum - 1];
        renderContent();
    }

    const main_html = `
        <div class="${COMPONENT_NAME}__overlay" style="display: none;">
            <div class="${COMPONENT_NAME}-modal">
                <div class="beeline-modal__loading"></div>
                <div class="${COMPONENT_NAME}-modal__wrap">
                    <button class="${COMPONENT_NAME}-modal__close">
                        <svg width="20" height="21" viewBox="0 0 20 21" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M1 1L19 19.0552" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                            <path d="M19 1L1 19.0552" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                        </svg>
                    </button>
                    <div class="${COMPONENT_NAME}-modal__content">
                    </div>
                </div>
            </div>
        </div>
    `;

    document.body.insertAdjacentHTML('beforeend', main_html);

    const $modalOverlay = document.body.querySelector(`.${COMPONENT_NAME}__overlay`);
    const $modal = $modalOverlay.querySelector(`.${COMPONENT_NAME}-modal`);
    const $modalContent = $modal.querySelector(`.${COMPONENT_NAME}-modal__content`);
    const $modalClose = $modalOverlay.querySelector(`.${COMPONENT_NAME}-modal__close`);

    function renderAlert(title, text, icon, button, textFirst) {
        const $alert = document.createElement('div');
        $alert.className = `${COMPONENT_NAME}-alert`;

        const html = `
        <div class="${COMPONENT_NAME}-alert">
            <div class="${COMPONENT_NAME}-alert__icon">
                ${icon}
            </div>

            ${textFirst ? `
                <div class="mb-2">${text}</div>
                <div class="${COMPONENT_NAME}-modal__title">${title}</div>
            ` : `
                <div class="${COMPONENT_NAME}-modal__title mb-2">${title}</div>
                <div>${text}</div>
            `}
        </div>

        <div class="${COMPONENT_NAME}-controls ${COMPONENT_NAME}-controls--centered">
            ${button ? `<button class="rf-forms__btn">${button.text}</button>` : ''}
        </div>
        `

        $modalContent.innerHTML = html;
        const $btn = $modalContent.querySelector(`.${COMPONENT_NAME}-controls .rf-forms__btn`);
        if ($btn) {
            $btn.addEventListener('click', button.handler);
        }
    }

    function renderContent() {
        const { currentStep } = formState;

        if (!currentStep) { return; }

        const stepIndex = formSteps.findIndex(step => step === currentStep);

        let html = `
            <div class="${COMPONENT_NAME}-modal__title">${currentStep.title}</div>

            <div class="${COMPONENT_NAME}-step-list" style="display: grid; grid-template-columns: repeat(${formSteps.length}, 1fr);">
                ${formSteps.reduce((output, elem, index) => {
                    const langMod = lang === 'uz' ? 'uz-lang' : '';

                    let stepClass = `${COMPONENT_NAME}-step ${langMod}`;
                    if (index <= stepIndex) {
                        stepClass = `${COMPONENT_NAME}-step ${COMPONENT_NAME}-step--active ${langMod}`;
                    }

                    return `${output}
                        <div class="${stepClass}">
                            <div class="${COMPONENT_NAME}-step__index">${index + 1}</div>
                            <div class="${COMPONENT_NAME}-step__name">${elem.stepName}</div>
                        </div>
                    `;
                }, '')}
            </div>
        `;

        $modalContent.innerHTML = html;

        const { fields, controls, onMount } = currentStep;
        
        if (fields) {
            const $fieldContainer = document.createElement('div');
            $fieldContainer.className = `${COMPONENT_NAME}-main-content`;
            fields.forEach((elem) => {

                switch(elem.type) {
                    case INPUT_TYPE.INPUT: {
                        if (elem.label) {
                            $fieldContainer.insertAdjacentHTML('beforeend', `<div class="rf-forms__input-label">${elem.label}</div>`)
                        }

                        if (elem.prefix || elem.suffix) {
                            const $inputGroup = document.createElement('div');
                            $inputGroup.className = 'rf-forms__input-group';

                            if (elem.prefix) {
                                $inputGroup.insertAdjacentHTML('beforeend', `<div class="rf-forms__input-group--prepend">${elem.prefix}</div>`);
                            }

                            const $input = document.createElement('input');
                            $input.className = `rf-forms__input ${COMPONENT_NAME}--card-input`;
                            $input.setAttribute('type', elem.typeAttr);
                            if (elem.placeholder) {
                                $input.setAttribute('placeholder', elem.placeholder);
                            }

                            if (elem.inputmode) {
                                $input.setAttribute('inputmode', elem.inputmode)
                            }

                            if (typeof elem.inputMask === 'function') {
                                $input.addEventListener('input', elem.inputMask);
                            }

                            $inputGroup.append($input);

                            if (elem.suffix) {
                                $inputGroup.insertAdjacentHTML('beforeend', `<div class="rf-forms__input-group--postpend">${elem.suffix}</div>`);
                            }

                            $fieldContainer.append($inputGroup);
                        } else {
                            if (elem.cardLogos) {
                                if (elem.cardLogos.length) {
                                    const $wrapper = document.createElement('div');
                                    $wrapper.className = `${COMPONENT_NAME}__card-expiry mb-2`;
                                    const $input = document.createElement('input');
                                    $input.className = `rf-forms__input ${COMPONENT_NAME}--card-input`;
                                    $input.setAttribute('type', elem.typeAttr);
                                    if (elem.placeholder) {
                                        $input.setAttribute('placeholder', elem.placeholder);
                                    }
                                    if (elem.inputmode) {
                                        $input.setAttribute('inputmode', elem.inputmode);
                                    }
                                    if (typeof elem.inputMask === 'function') {
                                        $input.addEventListener('input', elem.inputMask);
                                    }

                                    $wrapper.append($input);

                                    elem.cardLogos.forEach(imgSrc => {
                                        const $img = document.createElement('img');
                                        $img.setAttribute('height', '41');
                                        $img.setAttribute('src', imgSrc);

                                        $wrapper.append($img);
                                    })

                                    $fieldContainer.append($wrapper);
                                }
                            } else {
                                const $input = document.createElement('input');
                                $input.className = `rf-forms__input ${COMPONENT_NAME}--card-input mb-2`;
                                $input.setAttribute('type', elem.typeAttr);
                                if (elem.placeholder) {
                                    $input.setAttribute('placeholder', elem.placeholder);
                                }
                                if (elem.inputmode) {
                                    $input.setAttribute('inputmode', elem.inputmode);
                                }
                                if (typeof elem.inputMask === 'function') {
                                    $input.addEventListener('input', elem.inputMask);
                                }

                                $fieldContainer.append($input);
                            }
                        }

                        if (elem.description) {
                            $fieldContainer.insertAdjacentHTML('beforeend', `<div class="rf-forms__description">${elem.description}</div>`)
                        }
                        break;
                    }
                }
            });

            $modalContent.append($fieldContainer);
        }

        const $errors = document.createElement('div');
        $errors.className = `${COMPONENT_NAME}-modal__errors`;
        $modalContent.append($errors);

        if (controls) {
            const $controls = document.createElement('div');
            $controls.className = `${COMPONENT_NAME}-controls`;

            controls.forEach(elem => {
                let currentElement;
                switch (elem.type) {
                    case 'custom-btn': {
                        const $dummyDiv = document.createElement('div');
                        $dummyDiv.innerHTML = elem.customHTML;

                        if (typeof elem.handler === 'function') {
                            $dummyDiv.firstElementChild.addEventListener('click', () => {
                                elem.handler()
                            })
                        }

                        currentElement = $dummyDiv.firstElementChild;

                        break;
                    }

                    case INPUT_TYPE.LINK_BUTTON: {
                        const btn = document.createElement('button');
                        btn.className = 'rf-forms__link-btn';

                        if (elem.icon) {
                            btn.innerHTML += `<div class="rf-forms__link-btn-icon">
                                ${elem.icon}
                            </div>`;
                        }

                        btn.innerHTML += elem.text;

                        if (typeof elem.handler === 'function') {
                            btn.addEventListener('click', () => {
                                elem.handler()
                            })
                        }

                        currentElement = btn;
                        break;
                    }

                    case INPUT_TYPE.BUTTON: {
                        const btn = document.createElement('button');
                        btn.className = 'rf-forms__btn';
                        btn.innerText = elem.text;
                        if (typeof elem.handler === 'function') {
                            btn.addEventListener('click', () => {
                                elem.handler()
                            })
                        }

                        currentElement = btn;
                        break;
                    }

                    default: {
                        return;
                    }
                }
                $controls.append(currentElement);
            });

            $modal.querySelector(`.${COMPONENT_NAME}-modal__content`).append($controls);
        }

        if (typeof onMount === 'function') {
            onMount();
        }
    };

    // renderContent();

    const closeTransition = (e) => {
        if (!isOpen) {
            $modalOverlay.style.display = 'none';
        }
    }

    const openModal = (initState, onSuccess) => {
        if (!initialized) {
            renderContent();
            initialized = true;
        }
        isOpen = true;
        resetAll();
        $modalOverlay.style.display = 'flex';

        if (typeof initState === 'object') {
            if ('mobNumber' in initState) {
                const { mobNumber } = initState;
                const initNumber = String(mobNumber);

                if (initNumber.length === 12) {
                    formState.mobNumber = initNumber.substring(3);
                    renderContent();
                }
            }
        }

        if (typeof onSuccess === 'function') {
            externalCallbacks.onSuccess = onSuccess;
        }

        setTimeout(() => {
            $modal.classList.add(`${COMPONENT_NAME}-modal--open`);
        }, 0);
    }

    const closeModal = () => {
        isOpen = false;
        abortControllers.abortAll();
        abortControllers.clear();
        resetAll();
        $modal.classList.remove(`${COMPONENT_NAME}-modal--open`);
    };

    $modal.addEventListener('transitionend', closeTransition);

    $modalOverlay.addEventListener('click', function (e) {
        closeModal();
    });

    $modal.addEventListener('click', (e) => {
        e.stopPropagation();
    });

    $modalClose.addEventListener('click', closeModal);

    const $beepulLink = document.getElementById('ms-main-submenu-3');
    const $beepulFooterLink = document.getElementById('beepul-lite-anon-footer-link');
    const $beeBoxBeepulLinks = document.querySelectorAll('.ms-bee-box a[href="#beepul-lite-box"]');

    // if (document.location.host === 'localhost:3000') {
    //     openModal();
    // }

    window.__BeepulLiteForm = {
        openModal,
        closeModal
    };

    if ($beeBoxBeepulLinks) {
        $beeBoxBeepulLinks.forEach($link => {
            $link.onclick = function(e) {
                e.preventDefault();
                openModal();
            }
        })
    }

    if ($beepulFooterLink) {
        $beepulFooterLink.onclick = function(e) {
            e.preventDefault();
            openModal();
        }
    }
    
    if ($beepulLink) {
        $beepulLink.href = '#';

        $beepulLink.onclick = function(e) {
            e.preventDefault();
            openModal();
        }
    }
})();